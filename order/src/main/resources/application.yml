kafka:
  bootstrap-servers:
    - b-2.democluster2.o89s59.c2.kafka.ap-northeast-2.amazonaws.com:9098
    - b-3.democluster2.o89s59.c2.kafka.ap-northeast-2.amazonaws.com:9098
    - b-1.democluster2.o89s59.c2.kafka.ap-northeast-2.amazonaws.com:9098
  consumer:
    # consumer bootstrap servers가 따로 존재하면 설정
    # bootstrap-servers: 192.168.0.4:9092

    # 식별 가능한 Consumer Group Id
    group-id: testgroup
    # Kafka 서버에 초기 offset이 없거나, 서버에 현재 offset이 더 이상 존재하지 않을 경우 수행할 작업을 설정
    # latest: 가장 최근에 생산된 메시지로 offeset reset
    # earliest: 가장 오래된 메시지로 offeset reset
    # none: offset 정보가 없으면 Exception 발생
    auto-offset-reset: earliest
    # 데이터를 받아올 때, key/value를 역직렬화
    # JSON 데이터를 받아올 것이라면 JsonDeserializer
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  producer:
    # producer bootstrap servers가 따로 존재하면 설정
    # bootstrap-servers: 3.34.97.97:9092

    # 데이터를 보낼 때, key/value를 직렬화
    # JSON 데이터를 보낼 것이라면 JsonDeserializer
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.apache.kafka.common.serialization.StringSerializer
spring:
  cloud:
    kubernetes:
      discovery:
        all-namespaces: true #모든 네임스페이스에서 활성화
  redis:
    host: ${REDIS_HOST}
    port: 6379
  security:
    user:
      name: user
      password: password #PasswordEncoder.encode(password)
  application:
    name: order-service
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://${DB_HOST}:3306/order_server
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MariaDBDialect
    generate-ddl: true
    hibernate:
      ddl-auto: update
    show_sql: true
jwt:
  expiration: 30 # 30 min
  secretKey: mysecret
pay:
  admin-key: ${ADMIN_KEY}
toss:
  toss-key: ${TOSS_KEY}